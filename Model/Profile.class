<?php
/**
 * Status Class Doc Comment
 *
 * @category	Class
 * @package		Model
 * @author		bryyce
 * @license		http://www.gnu.org/copyleft/gpl.html GNU General Public License
 * @link		http://www.bryyce.fr/
 */
namespace Model;
use ORM;
class Profile extends ORM\MyEnregistrement
{
	protected static $has_and_belongs_to_many = array('users'=> array('master'=>false));
    
    /**
     * Constructeur de InstantGagnant
     *
     * @param <int> $_id id de l'objet a chercher dans la BDD si null un objet vide est crÃƒÂ©ÃƒÂ©
     */
    public function __construct($_id=null) {
        parent::__construct($_id);
    }


    /**
     *  Va chercher les commentaires liÃƒÂ©e ÃƒÂ  l'article en cours
     *
     * @return <Array<Commentaire>>
     */
    public function situationMembre() {
        if ($this->_situation_membre == null) {
            if ($this->id_situation_joueur != null) {
                $this->_situation_membre= SituationMembre::AllBy("id = {$this->id_situation_joueur}");
                $this->_situation_membre= $this->_situation_membre[0] ;
            }
            else
                $this->_situation_membre = new SituationMembre();
        }
        return $this->_situation_membre;
    }

    public function Commandes() {
        // Preparation de la requete
        if ($this->_commandes == null) {
            if ($this->id != null) 
                $this->_commandes = Commande::AllBy("id_membre = {$this->id}");
            else
                $this->_commandes = array();
        }
        return $this->_commandes;
    }

    public function Messages() {
        // Preparation de la requete
        if ($this->_messages == null) {
            if ($this->id != null) 
                $this->_messages = Message::AllBy("id_membre = {$this->id}");
            else
                $this->_messages = array();
        }
        return $this->_messages;
    }

    public function Status() {
        // Preparation de la requete
        if ($this->_status == null) {
            if ($this->id_status != null) {
                $this->_status = Status::allBy("id = {$this->id_status}");
                $this->_status = $this->_status[0] ;
            }
            else
                $this->_status = new Status();
        }
        return $this->_status;
    }

    public function Parrain() {
        // Preparation de la requete
        if ($this->_parrain == null) {
            if ($this->id_parrain) {
                $this->_parrain = Parrain::AllBy("id = {$this->id_parrain}");
                $this->_parrain= $this->_parrain[0] ;
            }else
                $this->_parrain = new Membre();
        }
        return $this->_parrain;
    }
   

    //***********************************//
    //  Fin Fonctions membres protÃƒÂ©gÃƒÂ©es  //
    //***********************************//
    public function validation() {
        $msg = "<ul>";
        if (count($this->dispo('pseudo')) == 1)
            $msg .= 'Ce pseudo existe dÃƒÂ©jÃƒÂ , veuillez en choisir un autre';
        if (count($this->dispo('mail')) == 1)
            $msg .= 'Cette adresse e-mail existe dÃƒÂ©jÃƒÂ , veuillez en choisir une autre';
        if (count($this->dispo('ip')) == 1)
            $msg .= 'Un compte par ordinateur est autorisÃƒÂ©';
        if (strlen($this->pseudo) > 15 OR strlen($this->pseudo) < 3)
            $msg .= 'Vous devez choisir un pseudo compris entre 3 et 15 caractÃƒÂ¨res';
        if (preg_match("#[^a-zA-Z0-9_-]#", $this->pseudo))
            $msg .= 'La syntaxe de votre pseudo est incorrecte';
        if (strlen($this->code) < 6 OR strlen($this->code) > 21)
            $msg .= 'Vous devez choisir un code secret compris entre 6 et 21 caractÃƒÂ¨res';
        if (!preg_match("#^[a-z0-9._-]+@[a-z0-9._-]{2,}\.[a-z]{2,4}$#", $this->mail))
            $msg .= 'La syntaxe de votre adresse e-mail est incorrecte';
        if ($msg != "<ul>")
            throw new Exception($msg . "</ul>");
    }


}
?>