<?php
/**
 *
 * Description of MyEnregistrement
 *
 * @author bryyce
 */

namespace ORM;
abstract class MyEnregistrement extends Enregistrement{

    const CLE_PRI="id";
    protected static $has_one = array();
    protected static $has_many = array();
    protected static $has_and_belongs_to_many = array();
    protected static $relations_elem = array();
    /**
     * Constructeur d'enregistrement
     *
     * @param <int> $_id id de l'objet a chercher dans la BDD si null un objet vide est crÃ©Ã©
     */
    public function __construct($_id=null) {
        $this->initAttributs(self::etiquettes());
        if ($_id != null) {
            $this->lecture($_id);
            //  $this->date = new DateTime($this->date);
        }
        foreach(static::$has_many as $k => $v){
            
        }
    }

    public function etiquettes() {
        return Config::getFields(self::table());
    }

    //	Donne la cle primaire de la table.
    protected static function cle_pri() {
        return self::CLE_PRI;
    }
    /**php 5.3 seulement**/
    //	Donne la table contenant les Departement.
    protected static function table() {
        $table =strtolower(preg_replace('#([a-zA-Z]+\\\\)+([a-zA-Z]+)#i','$2',get_called_class()));
        if( substr($table, strlen($table) - 1) != 's')
            return $table."s";
        else
            return $table;
        
    }

    protected static function AllBy($cond){
        $class = get_called_class();
        $res = myPDO::get()->prepare(
<<<SQL
    SELECT *
    FROM {$class::table()}
         WHERE $cond
SQL
        );
        $records = array();
        // Execution de la requete avec le parametre et lecture du resultat
        if ($res->execute() && $enregistrements = $res->fetchAll(\PDO::FETCH_ASSOC)) {
            // Affectation des valeurs 
            foreach ($enregistrements as $enregistrement) 
                $records[] = new $class ($enregistrement[$class::CLE_PRI]);
        } 
        return $records;
    }
    public static function All(){
        return self::AllBy("1=1");
        
    }

    public static function first() {
        $records = static::AllBy("1=1 ORDER BY id LIMIT 0,1");
        return $records[0];
    }

    public static function last() {
        $records = static::AllBy("1=1 ORDER BY id DESC LIMIT 0,1");
        return $records[0];
    }

    public static function __callStatic($method, $params)
    {
        if (!preg_match('/^(find|findFirst|count)By(\w+)$/', $method, $matches)) {
            throw new \Exception("Call to undefined method {$method}");
        }

        $criteriaKeys = explode('_And_', preg_replace('/([a-z0-9])([A-Z])/', '$1_$2', $matches[2]));
        $criteriaKeys = array_map('strtolower', $criteriaKeys);
        $criteriaValues = array_slice($params, 0, count($criteriaKeys));
        $criteria = array_combine($criteriaKeys, $criteriaValues);

        $method = $matches[1];
        return static::$method($criteria);
    }

    public static function find($_params){
        $params = array();
        foreach ($_params as $key => $value)
            $params[] = "$key = '$value'";
        return static::AllBy(implode(" AND ", $params));
    }
    
    
    /// Surcharge de __get pour donner acces aux valeurs sous la forme $e->attribut
    public function __get($_cle /** Nom de la propriete */) {
        if (array_key_exists($_cle, $this->valeurs)) // La propriete demandee est bien une cle du tableau des valeurs
            return $this->valeurs[$_cle] ;
        else if(array_key_exists($_cle, static::$has_one)){
            $id_assoc= 'id_'.$_cle;
            $class = 'Model\\'.ucfirst($_cle); 
            if (!array_key_exists($_cle,static::$relations_elem) || static::$relations_elem[$_cle] == null) {
                if ($this->$id_assoc) {
                    static::$relations_elem[$_cle] = $class::AllBy("id = {$this->$id_assoc}");
                    static::$relations_elem[$_cle]= self::$relations_elem[$_cle][0] ;
                }else
                    static::$relations_elem[$_cle] = new $class;
            }
            return self::$relations_elem[$_cle];
        }
        else if(array_key_exists($_cle, static::$has_many)){
            $id_assoc= 'id_'.$_cle;
            $class = 'Model\\'.ucfirst($_cle); 
            if (!array_key_exists($_cle,static::$relations_elem) || static::$relations_elem[$_cle] == null) {
                if ($this->$id_assoc) {
                    static::$relations_elem[$_cle] = $class::AllBy("id = {$this->$id_assoc}");
                }else
                    static::$relations_elem[$_cle] = array();
            }
            return self::$relations_elem[$_cle];
        }
        else if(array_key_exists($_cle, self::$has_and_belongs_to_many)){
            
        }
        throw new \Exception("Attribut '$_cle' inconnu dans '".get_class($this)."'");
    }

    /// Surcharge de __set pour donner acces aux valeurs sous la forme $e->attribut=val
    public function __set($_cle /** Nom de la propriete */, $_val /** Sa nouvelle valeur */) {
        if (array_key_exists($_cle, $this->valeurs)) // La propriete demandee est bien une cle du tableau des valeurs
            return $this->valeurs[$_cle] = $_val ;
        throw new Exception("Attribut '$_cle' inconnu dans '".get_class($this)."'");
    }

    /// Surcharge de __isset pour donner acces aux valeurs sous la forme isset($e->attribut)
    public function __isset($_cle /** Nom de la propriete */) {
        if (array_key_exists($_cle, $this->valeurs)) // La propriete demandee est bien une cle du tableau des valeurs
            return isset($this->valeurs[$_cle]);
        throw new Exception("Attribut '$_cle' inconnu dans '".get_class($this)."'");
    }

    /// Surcharge de __unset pour donner acces aux valeurs sous la forme unset($e->attribut)
    public function __unset($_cle /** Nom de la propriete */) {
        if (array_key_exists($_cle, $this->valeurs))// La propriete demandee est bien une cle du tableau des valeurs
            return $this->valeurs[$_cle] = null;
        throw new Exception("Attribut '$_cle' inconnu dans '" . get_class($this) . "'");
    }
}
?>